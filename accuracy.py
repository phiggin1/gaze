import pandas as pd
import argparse
import os
from operator import itemgetter
import numpy as np

table_objects = [
"/Objects/Bowl_1", 
"/Objects/Tomato_7d6fd278", 
"/Objects/waterbottle", 
"/Objects/Apple_34d5f204", 
"/Objects/Lettuce_b97186e2", 
"/Objects/Bread_a13c4e42", 
"/Objects/firstaid", 
"/Objects/Mug_77db6e4d", 
"/Objects/drill_textured/default", 
"/Objects/hammer_textured/default", 
]


parser = argparse.ArgumentParser(description='Generate gantt plot for gaze from files generated by headPgaze.py.')
parser.add_argument('--basefilename', type=str, required=True, help='Filename of the bagfile')

parser.add_argument("-d", "--distancetype", default='cosine_distance', 
    help='type of distance to use (euclidien_distance, cosine_distance)')
args = parser.parse_args()
#print(args.basefilename)
#print(args.distancetype)

out_file = os.path.splitext(os.path.basename(args.basefilename))[0].split('_')[0]
#print(out_file)


objects_file = os.path.join('gaze_data', out_file, args.distancetype,'distances.csv')
#print(objects_file)
audio_file = os.path.join('gaze_data', out_file, args.distancetype,'audio.csv')
#print(audio_file)


audio_csv = pd.read_csv(audio_file)
audio_list = []
df_audio = []
for index, frame in audio_csv.iterrows():
    audio_list.append(frame)
    flag = False
    for obj in table_objects:
        if frame['transcript'] == obj[9:].split('_')[0]:
            flag = True
    if not flag:
        print(flag)
        
obj_csv = pd.read_csv(objects_file)
obj_list = []
df_obj = []
count = 0
top_n = np.zeros(len(table_objects))
top_n_test = np.zeros(len(table_objects))
rank = []
for index, frame in obj_csv.iterrows():
    for audio in audio_list:
        if audio['start_timestamp'] <= frame['timestamp'] <= audio['end_timestamp']:
            dist =[]
            for obj in table_objects:
                if not np.isnan(frame[obj]): 
                    dist.append( (frame[obj], obj[9:].split('_')[0]) )

            dist = sorted(dist,key=itemgetter(0))

            r = [y[1] for y in dist].index(audio['transcript']) #zero indexed rank
            rank.append(r + 1)

            for i in range(r, len(top_n)):
                top_n[i] += 1

            count +=1
            
    
mrr = np.sum([(1.0/r) for r in rank])/len(rank)

print( args.basefilename.split('_')[0]+', ' + np.array2string(top_n[:4]/count, precision=4, separator=', ')[1:-1] + ', ' + str(mrr) )
