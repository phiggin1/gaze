import altair as alt
import pandas as pd
import argparse
import os
import numpy as np
from operator import itemgetter

table_objects = [
"/Objects/Bowl_1", 
"/Objects/Tomato_7d6fd278", 
"/Objects/waterbottle", 
"/Objects/Apple_34d5f204", 
"/Objects/Lettuce_b97186e2", 
"/Objects/Bread_a13c4e42", 
"/Objects/firstaid", 
"/Objects/Mug_77db6e4d", 
"/Objects/drill_textured/default", 
"/Objects/hammer_textured/default", 
]

parser = argparse.ArgumentParser(description='Generate gantt plot for gaze from files generated by headPgaze.py.')
parser.add_argument('--basefilename', type=str, required=True, help='Filename of the bagfile')

parser.add_argument("-d", "--distancetype", default='cosine_distance', 
    help='type of distance to use (euclidien_distance, cosine_distance)')
args = parser.parse_args()
#print(args.basefilename)
#print(args.distancetype)

out_file = os.path.splitext(os.path.basename(args.basefilename))[0].split('_')[0]
#print(out_file)


objects_file = os.path.join('gaze_data', out_file, args.distancetype,'objects.csv')
#print(objects_file)
audio_file = os.path.join('gaze_data', out_file, args.distancetype,'audio.csv')
#print(audio_file)
distances_file = os.path.join('gaze_data', out_file, args.distancetype,'distances.csv')
#print(distances_file)


df_obj = []

audio_csv = pd.read_csv(audio_file)
audio_list = []
for index, frame in audio_csv.iterrows():
    audio_list.append(frame)

for i in range(len(audio_list)):
    transcript = audio_list[i]['transcript']+"-Ground Truth"
    start = audio_list[i]['start_timestamp']
    end =  audio_list[i]['end_timestamp']
    df_obj.append(
        {"Objects":transcript ,"start":start, "end":end}
    )

start_time = audio_list[0]['start_timestamp']
end_time = audio_list[-1]['end_timestamp']

obj_csv = pd.read_csv(distances_file)
obj_list = []

for index, frame in obj_csv.iterrows():
    dist =[]
    for obj in table_objects:
        if not np.isnan(frame[obj]): 
            dist.append( (frame[obj], obj[9:].split('_')[0]) )

    dist = sorted(dist,key=itemgetter(0))
    closest = dist[0][1]

    if len(obj_list) > 0:
        if obj_list[-1][1] !=  closest:
            obj_list.append( (frame['timestamp'], closest) )

    else:
        obj_list.append( (frame['timestamp'], closest) )



for i in range(len(obj_list)-1):
    obj_name = obj_list[i][1]#[9:].split('_')[0]
    start = obj_list[i][0]
    end =  obj_list[i+1][0]
    if start < end_time and end > start_time:
        df_obj.append(
            {"Objects":obj_name, "start":start, "end":end}
        )



source_obj = pd.DataFrame(df_obj)
chart_obj = alt.Chart(source_obj).mark_bar().encode(
    x = alt.X('start',
        scale=alt.Scale(zero=False), title="Time"
    ),
    x2='end',
    y = alt.Y('Objects', sort=['Bread', "Bread-Ground Truth",'Lettuce',"Lettuce-Ground Truth",'Apple',"Apple-Ground Truth",'Tomato',"Tomato-Ground Truth",'Mug',"Mug-Ground Truth",'Bowl',"Bowl-Ground Truth",'waterbottle',"waterbottle-Ground Truth",'firstaid',"firstaid-Ground Truth",'drill',"drill-Ground Truth",'hammer',"hammer-Ground Truth"], title=""),
    color=alt.Color('Objects', scale=alt.Scale(
        domain=['Bread', "Bread-Ground Truth",'Lettuce',"Lettuce-Ground Truth",'Apple',"Apple-Ground Truth",'Tomato',"Tomato-Ground Truth",'Mug',"Mug-Ground Truth",'Bowl',"Bowl-Ground Truth",'waterbottle',"waterbottle-Ground Truth",'firstaid',"firstaid-Ground Truth",'drill',"drill-Ground Truth",'hammer',"hammer-Ground Truth"],
        range=['red', "blue",'orange',"blue",'yellow',"blue",'green',"blue",'red',"blue",'orange',"blue",'yellow',"blue",'green',"blue",'red',"blue",'yellow',"blue"]
        ), legend=None)
).properties(
    width=1200,
    height=300
)
chart_obj.save(os.path.join('gaze_data', out_file, args.distancetype,out_file+'_gaze.html'))

'''
domain=['Bread', "Bread-Ground Truth",'Lettuce',"Lettuce-Ground Truth",'Apple',"Apple-Ground Truth",'Tomato',"Tomato-Ground Truth",'Mug',"Mug-Ground Truth",'Bowl',"Bowl-Ground Truth",'waterbottle',"waterbottle-Ground Truth",'firstaid',"firstaid-Ground Truth",'drill',"drill-Ground Truth",'hammer',"hammer-Ground Truth"],
range=[['red', "blue",'orange',"blue",'yellow',"blue",'green',"blue",'red',"blue",'orange',"blue",'yellow',"blue",'green',"blue",'red',"blue",'yellow',"blue"]
'''