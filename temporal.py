import altair as alt
import pandas as pd
import argparse
import os
import numpy as np
from operator import itemgetter
from math import floor

table_objects = [

"/Objects/Tomato_7d6fd278", 
"/Objects/Apple_34d5f204", 
"/Objects/Lettuce_b97186e2", 
"/Objects/Bread_a13c4e42", 
"/Objects/Bowl_1", 
"/Objects/Mug_77db6e4d",  
"/Objects/waterbottle", 
"/Objects/firstaid", 
"/Objects/drill_textured/default",
"/Objects/hammer_textured/default", 
]



parser = argparse.ArgumentParser(description='Generate gantt plot for gaze from files generated by headPgaze.py.')
parser.add_argument('--basefilename', type=str, required=True, help='Filename of the bagfile')

parser.add_argument("-d", "--distancetype", default='cosine_distance', 
    help='type of distance to use (euclidien_distance, cosine_distance)')
args = parser.parse_args()
#print(args.basefilename)
#print(args.distancetype)

out_file = os.path.splitext(os.path.basename(args.basefilename))[0].split('_')[0]
#print(out_file)

audio_file = os.path.join('gaze_data', out_file, args.distancetype,'audio.csv')
#print(audio_file)
distances_file = os.path.join('gaze_data', out_file, args.distancetype,'distances.csv')
#print(distances_file)


w = 3000
h = 400

df_audio = []
audio_csv = pd.read_csv(audio_file)
audio_list = []
for index, frame in audio_csv.iterrows():
    audio_list.append(frame)

for i in range(len(audio_list)):
    transcript = audio_list[i]['transcript']
    start = audio_list[i]['start_timestamp']
    end =  audio_list[i]['end_timestamp']
    df_audio.append(
        {"Objects":transcript ,"start":start, "end":end, "description":"description"}
    )

source_obj = pd.DataFrame(df_audio)
ground_truth = alt.Chart(source_obj).mark_bar().encode(
    x = 'start:O',
    x2= 'end:O',
    y = alt.Y('description', title=""),
).properties(
    width=w,
    height=h/4
)
text = ground_truth.mark_text(
    align='center',
    baseline='middle',
).encode(
    text='Objects'
).properties(
    width=w,
    height=h/4
)

ground_truth_text = ground_truth + text
ground_truth_text.properties(height=h/4, width=w)

df_obj = []
dist_csv = pd.read_csv(distances_file)

dist_list = []
for index, frame in dist_csv.iterrows():
    #if 170.0 <= frame['timestamp'] <= 210.0:

    if frame['timestamp'] <= audio_list[0]['end_timestamp']:
        dist_list.append(frame)

d_list = []
for frame in dist_list:
    for obj in table_objects:
        f = dict()
        f['timestamp']=frame['timestamp']
        f['object']=obj
        f['dist']=frame[obj]
        d_list.append(f)


vel_list = []
for index, frame in enumerate(dist_list):
    if index > 0:
        vel_frame = dict()
        vel_frame['timestamp'] = frame['timestamp']
        for obj in table_objects:
            #print(frame['timestamp'], dist_list[index]['timestamp'])
            if dist_list[index][obj] < 2.0:
                vel_frame[obj] = (dist_list[index][obj] - dist_list[index-1][obj])/(dist_list[index]['timestamp'] - dist_list[index-1]['timestamp'])
        vel_list.append(vel_frame)

v_list = []
for frame in vel_list:
    for obj in table_objects:
        if  obj in frame:
            f = dict()
            f['timestamp']=frame['timestamp']
            f['object']=obj
            f['vel']=frame[obj]
            v_list.append(f)

'''
accel_list = []
for index, frame in enumerate(vel_list):
    if index > 0:
        accel_frame = dict()
        accel_frame['timestamp'] = frame['timestamp']
        for obj in table_objects:
            accel_frame[obj] = (vel_list[index][obj] - vel_list[index-1][obj])/(vel_list[index]['timestamp'] - vel_list[index-1]['timestamp'])
        accel_list.append(accel_frame)
a_list = []
for frame in accel_list:
    for obj in table_objects:
        f = dict()
        f['timestamp']=frame['timestamp']
        f['object']=obj
        f['accel']=frame[obj]
        a_list.append(f)
'''


source_dist = pd.DataFrame(d_list)
dist_plot = alt.Chart(source_dist).mark_point(clip=True, size=15, opacity=0.5).encode(
    x = alt.X('timestamp:O',  scale=alt.Scale(zero=False), axis=alt.Axis(title='Time')),
    y = alt.Y('dist:Q', scale=alt.Scale(domain=(0.0, 1.0))),
    color = alt.Color('object:O', scale=alt.Scale(scheme='dark2'))
).properties(
    width=w,
    height=h
)
#dist_plot.save('gaze_data/'+out_file+'_dist.html')


source_vel = pd.DataFrame(v_list)
vel_plot = alt.Chart(source_vel).mark_point(clip=True, size=15, opacity=0.5).encode(
    x = alt.X('timestamp:O',  scale=alt.Scale(zero=False), axis=alt.Axis(title='Time')),
    y = alt.Y('vel:Q', scale=alt.Scale(domain=(-1.0, 1.0))),
    color = alt.Color('object:O', scale=alt.Scale(scheme='dark2'))
).properties(
    width=w,
    height=h
)
#vel_plot.save('gaze_data/'+out_file+'_vel.html')

'''
source_accel = pd.DataFrame(a_list)
accel_plot = alt.Chart(source_accel).mark_point(clip=True).encode(
    x = alt.X('timestamp:O',  scale=alt.Scale(zero=False), axis=alt.Axis(title='Time')),
    y = alt.Y('accel:Q', scale=alt.Scale(domain=(-2, 2))),
    color = alt.Color('object:O', scale=alt.Scale(scheme='dark2'))
).properties(
    width=1800,
    height=200
)
accel_plot.save('gaze_data/'+out_file+'_accel.html')
'''

two_charts_template = """
<!DOCTYPE html>
<html>
<head>
  <script src="https://cdn.jsdelivr.net/npm/vega@{vega_version}"></script>
  <script src="https://cdn.jsdelivr.net/npm/vega-lite@{vegalite_version}"></script>
  <script src="https://cdn.jsdelivr.net/npm/vega-embed@{vegaembed_version}"></script>
</head>
<body>

<div id="vis1"></div>
<div id="vis2"></div>

<script type="text/javascript">
  vegaEmbed('#vis1', {spec1}).catch(console.error);
  vegaEmbed('#vis2', {spec2}).catch(console.error);
</script>
</body>
</html>
"""
alt.data_transformers.disable_max_rows()

with open(os.path.join('gaze_data', out_file, args.distancetype,out_file+'_charts.html'), 'w') as f:
    f.write(two_charts_template.format(
        vega_version=alt.VEGA_VERSION,
        vegalite_version=alt.VEGALITE_VERSION,
        vegaembed_version=alt.VEGAEMBED_VERSION,
        spec1=dist_plot.to_json(indent=None),
        spec2=vel_plot.to_json(indent=None),
    ))

'''
vel_top_n = np.zeros(len(table_objects))
dist_top_n = np.zeros(len(table_objects))
d_rank = []
v_rank = []
count = 0

for i in range(len(vel_list)):
    d_iter = i + 1
    v_iter = i
    if dist_list[d_iter]['timestamp'] != vel_list[v_iter]['timestamp']:
        print('timestampes not equal')
        break
    timestamp = dist_list[d_iter]['timestamp']
    for audio in audio_list:
        #if audio['start_timestamp'] <= timestamp <= audio['end_timestamp']:
        if  timestamp <= audio['start_timestamp']:
            dist =[]
            vel = []

            for obj in table_objects:
                dist.append( (dist_list[d_iter][obj], obj[9:].split('_')[0]) )
                vel.append( (vel_list[v_iter][obj], obj[9:].split('_')[0]) )

            dist = sorted(dist,key=itemgetter(0))
            vel = sorted(vel,key=itemgetter(0))

            print(timestamp, vel)
            r_dist = [y[1] for y in dist].index(audio['transcript']) #zero indexed rank
            r_vel = [y[1] for y in vel].index(audio['transcript']) #zero indexed rank
            
            d_rank.append(r_dist + 1)
            v_rank.append(r_vel + 1)

            print

            for i in range(r_dist, len(dist_top_n)):
                dist_top_n[i] += 1

            for i in range(r_vel, len(vel_top_n)):
                vel_top_n[i] += 1

            count +=1
        break

dist_mrr = np.sum([(1.0/r) for r in d_rank])/len(d_rank)
vel_mrr = np.sum([(1.0/r) for r in v_rank])/len(v_rank)

print( args.basefilename.split('_')[0]+', ' + np.array2string(dist_top_n[:3]/count, precision=4, separator=', ')[1:-1] + ', ' + str(dist_mrr) )
print( args.basefilename.split('_')[0]+', ' + np.array2string(vel_top_n[:3]/count, precision=4, separator=', ')[1:-1] + ', ' + str(vel_mrr) )
'''